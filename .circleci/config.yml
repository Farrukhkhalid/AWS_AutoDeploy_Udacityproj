# This config is equivalent to both the '.circleci/extended/orb-free.yml' and the base '.circleci/config.yml'
version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name udapeople-backend-prod-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-prod-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-prod-<<parameters.workflow_id>>
  
  undo-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            cd ~/project/backend
            if [[ -f "~/project/.circleci/outputs/db_migration_success" ]]; then
              npm i
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build Frontend
          command: |
            unzip frontend.zip
            npm i --prefix frontend
            npm run lint --prefix frontend
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/node_modules

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build Backend
          command: |
            unzip backend.zip
            npm i --prefix backend
            npm run lint --prefix backend
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/node_modules
      
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run: 
          name: Run Frontend Tests
          command: |
            unzip frontend.zip
            npm i --prefix frontend
            npm run test --prefix frontend
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run: 
          name: Run Backend Tests
          command: |
            unzip backend.zip
            npm i --prefix backend
            npm run test --prefix backend
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: Analyzing Frontend
          command: |
            unzip frontend.zip
            #npm audit --audit-level=critical --prefix frontend
            #npm install
            npm audit fix --audit-level=critical --force --prefix frontend

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: Analyzing Backend
          command: |
            unzip backend.zip
            #npm audit --audit-level=critical --prefix backend
            npm audit fix --audit-level=critical --force --prefix backend
            
  deploy-backend-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Deploy the backend infrastructure using cloudformation
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name udapeople-backend-prod-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Save backend URL and IP (for ansible)
          command: |
            BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "http://$BACKEND_AWS_PUBLIC_IP:3030" >> .circleci/outputs/backend_url.txt
            echo "[all]" >> .circleci/ansible/inventory.txt
            echo "$BACKEND_AWS_PUBLIC_IP" >> .circleci/ansible/inventory.txt
            cat .circleci/outputs/backend_url.txt
      - run: yum -y install tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/outputs/backend_url.txt
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Deploy the frontend infrastructure using cloudformation
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name udapeople-frontend-prod-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  
  configure-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible openssh zip
            pip install awscli
      - add_ssh_keys:
          fingerprints: [ "83:e8:42:42:7b:75:f1:21:26:5c:9d:3b:4f:ae:c6:2e" ]
      - run:
          name: Setup Prometheus and Install dependencies
          command: |
            cd .circleci/ansible
            chmod 400 ubuntu_key.pem
            #ls -la
            cat inventory.txt
            ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt configure-server.yaml --private-key ubuntu_key.pem
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  
  run-migrations-for-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install Dependencies
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            unzip backend.zip
      - run:
          name: Run DB migrations
          command: |
            cd backend
            npm install
            npm run migrations >> migration_output.txt
            echo "Run Migrations finished!!!"
            cat migration_output.txt
      - run:
          name: Store migration result in a file.
          command: |
            cd backend
            if grep -q "has been executed successfully." migration_output.txt
            then
              touch ~/project/.circleci/outputs/db_migration_success
            fi
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/outputs/
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  
  deploy-backend-artifact:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs rsync openssh npm ansible zip tar
            pip install awscli
            unzip backend.zip
      - run:
          name: Build backend app
          command: |
            cd ~/project/backend
            npm i
            npm run build
            cp package* ./dist
            #tar cvzf dist.tar.gz dist
            zip -rq dist.zip dist
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv dist.zip ~/project/.circleci/ansible/roles/deploy/files/

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/roles/deploy/files/dist.zip
      - add_ssh_keys:
          fingerprints: [ "83:e8:42:42:7b:75:f1:21:26:5c:9d:3b:4f:ae:c6:2e" ]
          
      - run:
          name: Setup EC2 instance & copy compiled backend to the EC2 instance
          command: |
            echo "Print list in root dir"
            ls -l
            echo "print list in /ansible/roles/deplot/files/"
            cd ~/project/.circleci/ansible/roles/deploy/files/
            ls -l
            cd ~/project/.circleci/ansible
            chmod 400 ubuntu_key.pem
            #echo "[all]" >> inventory.txt
            #echo "54.211.13.45" >> inventory.txt
            ansible-playbook -i inventory.txt deploy-server.yaml --private-key ubuntu_key.pem
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - undo-migrations

  deploy-frontend-artifact:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
            unzip frontend.zip
      - run:
          name: Package frontend app
          command: |
            #export API_URL=`cat .circleci/outputs/backend_url.txt`
            export API_URL="http://34.232.110.202:3030"
            echo "API_URL: $API_URL"
            cd ~/project/frontend
            npm i
            npm install typescript@rc
            npm run build
      - run:
          name: Copy frontend to s3 bucket.
          command: |
            cd ~/project/frontend
            #aws s3 cp dist s3://udapeople-prod-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws s3 cp dist s3://udapeople-prod-955e873 --recursive
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/dist
      - destroy-environment:
          workflow_id: "955e873" 
          #"${CIRCLE_WORKFLOW_ID:0:7}"
      - undo-migrations
  
  smoke-test-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Smoke test frontend app
          command: |
            URL="http://udapeople-prod-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/index.html"
            echo "URL: $URL"
            curl -s ${URL} | grep -q "Welcome"
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - undo-migrations

  smoke-test-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Smoke test backend app.
          command: |
            API_URL=`cat .circleci/outputs/backend_url.txt`
            echo $API_URL
            curl -s $API_URL/api/status
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - undo-migrations


  deploy-cloudfront-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy the backend infrastructure using cloudformation
          command: |
            OLD_WORKFLOW_ID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo "OLD_WORKFLOW_ID: $OLD_WORKFLOW_ID"
            curl -H "Content-Type: text/plain" -H "token: cdad465b-4f70-4384-90a8-06958b30ebb1" --request PUT --data "$OLD_WORKFLOW_ID" https://api.memstash.io/values/OLD_WORKFLOW_ID
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            printf '%s\n' "${STACKS[@]}"
            printf '%s\n' "${STACKS[@]}">>.circleci/outputs/existing_stacks.txt
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name udapeople-prod-cloudfront
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/outputs/existing_stacks.txt
      - run:
          name: Clean up old environment
          command: |
            OLD_WORKFLOW_ID=$(curl -H "token: cdad465b-4f70-4384-90a8-06958b30ebb1" --request GET https://api.memstash.io/values/OLD_WORKFLOW_ID)
            echo "OLD_WORKFLOW_ID: $OLD_WORKFLOW_ID"
            if cat .circleci/outputs/existing_stacks.txt | grep -q "$OLD_WORKFLOW_ID"; then
              echo "Removing previous stack"
              echo "Old bucket: s3://udapeople-${OLD_WORKFLOW_ID}"
              aws cloudformation delete-stack --stack-name udapeople-backend-${OLD_WORKFLOW_ID}
              aws s3 rm s3://udapeople-${OLD_WORKFLOW_ID} --recursive
              aws cloudformation delete-stack --stack-name udapeople-frontend-${OLD_WORKFLOW_ID}
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - undo-migrations          

workflows:
  default:
    jobs:
#       - build-frontend:
#           filters:
#             branches:
#               only: [stop_CI]
#       - build-backend:
#           filters:
#             branches:
#               only: [stop_CI]
#       - test-backend:
#           requires:
#             - build-backend
#       - test-frontend:
#           requires:
#             - build-frontend
#       - scan-backend:
#           requires: 
#             - test-backend
#       - scan-frontend:
#           requires: 
#             - test-frontend
#       - deploy-backend-infrastructure:
#           requires: 
#             - scan-backend
#           filters:
#             branches:
#               only: [main]
#       - deploy-frontend-infrastructure:
#           requires: 
#             - scan-frontend
#           filters:
#             branches:
#               only: [main]
#       - configure-backend:
#           requires:
#             - deploy-backend-infrastructure
#             - deploy-frontend-infrastructure
#       - run-migrations-for-backend:
#           requires:
#             - configure-backend
#       - deploy-backend-artifact:
#           requires:
#             - run-migrations-for-backend
      - deploy-frontend-artifact
#           requires:
#             - deploy-frontend-infrastructure
#             - run-migrations-for-backend
#             - deploy-backend-artifact
#       - smoke-test-backend:
#           requires:
#             - deploy-backend-artifact
#       - smoke-test-frontend:
#           requires:
#             - deploy-frontend-artifact
#       - deploy-cloudfront-infrastructure:
#           requires:
#             - smoke-test-backend
#             - smoke-test-frontend

