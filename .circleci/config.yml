# This config is equivalent to both the '.circleci/extended/orb-free.yml' and the base '.circleci/config.yml'
version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name udapeople-backend-prod-<<parameters.workflow_id>>
            #aws s3 rm s3://udapeople-prod-<<parameters.workflow_id>> --recursive
            #aws cloudformation delete-stack --stack-name udapeople-frontend-prod-<<parameters.workflow_id>>
  
  undo-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    #parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            cd ~/project/backend
            if [[ -f "~/project/.circleci/outputs/db_migration_success" ]]; then
              npm i
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      # My code here
      - run:
          name: Build Frontend
          command: |
            npm i --prefix frontend
            npm run lint --prefix frontend
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/node_modules
      #
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      # my code here
      - run:
          name: Build Backend
          command: |
            npm i --prefix backend
            npm run lint --prefix backend
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/node_modules
      #
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run: 
          name: Run Frontend Tests
          command: |
            npm i --prefix frontend
            npm run test --prefix frontend
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run: 
          name: Run Backend Tests
          command: |
            npm i --prefix backend
            npm run test --prefix backend
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: Analyzing Frontend
          command: |
            #npm audit --audit-level=critical --prefix frontend
            #npm install
            npm audit fix --audit-level=critical --force --prefix frontend

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: Analyzing Backend
          command: |
            #npm audit --audit-level=critical --prefix backend
            npm audit fix --audit-level=critical --force --prefix backend
            
  deploy_backend_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Deploy the backend infrastructure using cloudformation
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name udapeople-backend-prod-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Save backend URL and IP (for ansible)
          command: |
            BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "http://$BACKEND_AWS_PUBLIC_IP:3030" >> .circleci/outputs/backend_url.txt
            echo "[all]" >> .circleci/ansible/inventory.txt
            echo "$BACKEND_AWS_PUBLIC_IP" >> .circleci/ansible/inventory.txt
            cat .circleci/outputs/backend_url.txt
      #- run: yum -y install tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/outputs/backend_url.txt
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

            
workflows:
  default:
    jobs:
      - build-frontend:
          filters:
            branches:
              only: [main]
      - build-backend:
          filters:
            branches: 
              only: [main]
      - test-backend:
          requires:
            - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy_backend_infrastructure:
          requires: [scan-backend]

